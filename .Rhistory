group_by(BldgType)
a <-ggplot(ames, aes(x = reorder(BldgType, -SalePrice), y = SalePrice)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
#3
group_by(BldgType)
#3
count(BldgType)
#3
count(ames)
#3
summarize(ames)
#3
R > table(ames$BldgType)
R
library(classdata)
library(ggplot2)
library(dplyr)
data(ames)
View(ames)
?ames
#1
??geom_abline
p <- ggplot(ames, aes(x = GrLivArea, y = SalePrice)) + geom_point() + geom_abline(intercept = 20000, slope = 100)
p
R
#3
R > table(ames$BldgType)
a <-ggplot(ames, aes(x = reorder(BldgType, -SalePrice), y = SalePrice)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
#3
R > table(ames$BldgType)
#3
table(ames$BldgType)
#3
number_of_sales <- table(ames$BldgType)
class(number_of_sales)
#3
number_of_sales <- table(ames$BldgType)
number_of_sales
a <-ggplot(ames, aes(x = reorder(BldgType, -SalePrice), y = SalePrice)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
table(ames$BldgType)
number_of_sales <- c(1220, 31, 52 , 43, 114)
#3
table(ames$BldgType)
number_of_sales <- c(1220, 31, 52 , 43, 114)
a <-ggplot(ames, aes(x = reorder(BldgType, -number_of_sales), y = number_of_sales)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
a <-ggplot(ames, aes(x = BldgType, y = number_of_sales)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
a <-ggplot(ames, aes(x = BldgType, y = ames$BldgType)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
ames$BldgType
#3
count(ames$BldgType)
#3
table(ames$BldgType)
a <-ggplot(ames, aes(x = BldgType, y = table(ames$BldgType))) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
a <-ggplot(ames, aes(x = BldgType, y = table(BldgType))) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
table(ames$BldgType)
#3
table(ames$BldgType)
a <-ggplot(ames, aes(x = BldgType, y = )) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
#3
table(ames$BldgType)
a <-ggplot(ames, aes(x = BldgType, y = )) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
library(classdata)
library(ggplot2)
library(dplyr)
data(ames)
View(ames)
?ames
#1
??geom_abline
p <- ggplot(ames, aes(x = GrLivArea, y = SalePrice)) + geom_point() + geom_abline(intercept = 20000, slope = 100)
p
#3
table(ames$BldgType)
a <-ggplot(ames, aes(x = BldgType, y = )) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a <-ggplot(ames, aes(x = BldgType)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
table(ames$BldgType)
class(table(ames$BldgType))
#3
table(ames$BldgType)
#3
class(ames$BldgType)
#3
o <- table(ames$BldgType)
o
#3
o <- ames$BldgType
o
factor(o, levels=1220, 114, 52, 43, 31)
factor(o, levels='1220', '114', '52', '43', '31')
l <- factor(o, levels=1220, 114, 52, 43, 31)
#3
o <- ames$BldgType
o
l <- factor(o, levels=1220, 114, 52, 43, 31)
a <-ggplot(ames, aes(x = BldgType, y= l)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
#l <- factor(o, levels=1220, 114, 52, 43, 31)
a <-ggplot(ames, aes(x = BldgType, y= count)) +
geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
library(ggplot2)
library(classdata)
ggplot(fbiwide, aes(x=Burglary, y=Murder)) + geom_point()
ggplot(fbiwide, aes(x=`Burglary`, y=`Murder`)) + geom_point()
ggplot(fbiwide, aes(x=Burglary, y=Murder)) + geom_point() + geom_line()
fbi2018 <- fbiwide[fbiwide$Year == 2018 &
fbiwide$State %in%
c('Iowa', 'Illinois', 'Nebraska'), ]
fbi2018
ggplot(fbi2018, aes(x=State, y=Population)) + geom_bar() # WRONG
ggplot(fbi2018, aes(x=State, weight=Population)) + geom_bar()
ggplot(fbiwide[fbiwide$State %in% c('Iowa', 'Illinois', 'Nebraska'), ], aes(x=State, weight=Population)) + geom_bar()
ggplot(fbi2018, aes(x=State)) + geom_bar()
#3
#l <- factor(o, levels=1220, 114, 52, 43, 31)
a <-ggplot(ames, aes(x = BldgType)) + geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
ggplot(fbi2018, aes(x=State)) + geom_bar()
ggplot(dat, aes(x=State, weight=Population, fill=Year)) + geom_bar()
bar
#3
#l <- factor(o, levels=1220, 114, 52, 43, 31)
a <-ggplot(ames, aes(x = BldgType, y = ames$BldgType)) + geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
table(ames$BldgType)
#3
table(ames$BldgType)
#3
table(ames$BldgType)
m <- ames(
BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")),
SalesTimes = c(1120, 114, 52, 43, 31)
)
library(classdata)
library(ggplot2)
library(dplyr)
data(ames)
View(ames)
?ames
#1
??geom_abline
p <- ggplot(ames, aes(x = GrLivArea, y = SalePrice)) + geom_point() + geom_abline(intercept = 20000, slope = 100)
p
#3
table(ames$BldgType)
m <- ames(
BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")),
SalesTimes = c(1120, 114, 52, 43, 31)
)
#3
table(ames$BldgType)
m <- ames(BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
m
library(classdata)
library(ggplot2)
library(dplyr)
data(ames)
View(ames)
?ames
#1
??geom_abline
p <- ggplot(ames, aes(x = GrLivArea, y = SalePrice)) + geom_point() + geom_abline(intercept = 20000, slope = 100)
p
#3
table(ames$BldgType)
dat <- ames(BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
#3
class(ames)
dat <- ames(BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
#3
class(ames)
dat <- ames(ames$BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
dat <-(ames$BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
dat <- ames[(BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))]
dat <- ames[BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)]
dat
a <-ggplot(dat, aes(x = BldgType, y = SalesTimes)) + geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
#3
class(ames)
table(ames$BldgType)
dat <- ames[BldgType1 = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)]
dat
a <-ggplot(dat, aes(x = BldgType1, y = SalesTimes)) + geom_bar(stat="identity" , color= 'skyblue' , fill='steelblue')
a
dat <- BldgType1 = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)
dat <- (BldgType1 = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31))
dat <- [BldgType1 = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)]
table(ames$BldgType)
dat <- BldgType1 = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)]
dat <- ames[BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon")), SalesTimes = c(1120, 114, 52, 43, 31)]
dat <- ames[BldgType = factor(c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"), levels=c("1Fam","TwnhsE","Duplex","Twnhs","2fmCon"))]
dat
tbl <- with(ames, table(ames$BldgType))
class(tbl)
barplot(tbl, beside = TRUE, legend = TRUE)
table(ames$BldgType)
#3
table(ames$BldgType)
tbl <- with(ames, table(ames$BldgType))
barplot(tbl, beside = TRUE, legend = TRUE)
library(classdata)
library(ggplot2)
library(dplyr)
data(ames)
View(ames)
?ames
#1
??geom_abline
p <- ggplot(ames, aes(x = GrLivArea, y = SalePrice)) + geom_point() + geom_abline(intercept = 20000, slope = 100)
p
theTable <- within(ames,
BldgType <- factor(BldgType,
levels=names(sort(table(BldgType),
decreasing=TRUE))))
## plot
ggplot(theTable,aes(x=BldgType))+geom_bar(binwidth=1)
theTable <- within(ames,
BldgType <- factor(BldgType,
levels=names(sort(table(BldgType),
decreasing=TRUE))))
## plot
ggplot(theTable,aes(x=BldgType))+geom_bar()
#4
houseAge <- ames$YrSold - ames$YearBuilt
houseAge
t <- ggplot(ames, aes(x = houseAge, y = SalePrice)) + geom_point()
t
ggplot(neighborhoods, aes(x=YearBuilt, weight=SalePrice)) + geom_bar() + facet_grid(Neighborhood ~ LandSlope )
?ames
#7
ggplot(ames, aes(x = OverallCond, fill=BldgType)) + geom_histogram(position='dodge')
#LAB5
install.packages("usmap")
library(usmap)
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
states <- map_data("state")
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
library(usmap)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
per <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv" , stringsAsFactors = FALSE)
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
states <- map_data("state")
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
states <- map_data("maps")
library(maps)
#LAB5
library(dplyr)
library(tidyr)
library(readr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
library(maps)
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
states <- map_data("maps")
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
readxl::read_xlsx
states <- map_data("state")
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
mymap <- readxl::read_xlsx("FRPP_GLC_-_United_StATESaPRIL122021_(2).xlsx")
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
setwd("~/Desktop/DS202/WEEK12/LAB5")
mymap <- readxl::read_xlsx("FRPP_GLC_-_United_StATESaPRIL122021_(2).xlsx")
class(mymap)
View(mymap)
states <- map_data("state")
library(maps)
library(maps)
library(maptools)
library(sp)
library(usmap)
library(ggplot2)
ac_transformed <- usmap_transform(most_dangerous)
install.packages("maptools")
library(maptools)
ac_transformed <- usmap_transform(most_dangerous)
usmap::plot_usmap("states", labels = TRUE)
usmap::usmap_crs()@projargs
library(tidyverse)
states <- map_data("state")
View(most_dangerous)
str(states)
install.packages("tmap")
install.packages("tmaptools")
plot_usmap(regions = "states")
str(states)
states <- map_data("state")
rlang::last_error()
install.packages("maps")
library(maps)
states <- map_data("state")
str(state)
head(states)
View(states)
View(most_dangerous)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
per <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv" , stringsAsFactors = FALSE)
#1
table(acc$DAY_WEEK)
#2
fatally_hurt <- per %>% filter(INJ_SEV == 4)
#3
newdata <- na.omit(per)
map(newdata, ~sum(is.na(.)))
most_dangerous <- newdata %>% filter(INJ_SEV == 4) %>% group_by(STATE) %>% count(MAKE)
most_dangerous <- most_dangerous  %>%
group_by(STATE) %>%
slice(which.max(n))
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
setwd("~/Desktop/DS202/WEEK12/LAB5")
mymap <- readxl::read_xlsx("FRPP_GLC_-_United_StATESaPRIL122021_(2).xlsx")
states <- map_data("state")
View(states)
View(most_dangerous)
View(mymap)
StateLonLat <- most_dangerous %>%
group_by('State Name', MAKE) %>%
right_join(states, by = c('State Name' = 'region')) %>%
summarize(avgLong = mean(long),
avgLat = mean(lat))
most_dangerous <- tolower(most_dangerous)
View(most_dangerous)
#1
table(acc$DAY_WEEK)
#2
fatally_hurt <- per %>% filter(INJ_SEV == 4)
#3
newdata <- na.omit(per)
map(newdata, ~sum(is.na(.)))
most_dangerous <- newdata %>% filter(INJ_SEV == 4) %>% group_by(STATE) %>% count(MAKE)
most_dangerous <- most_dangerous  %>%
group_by(STATE) %>%
slice(which.max(n))
#4 Create a map, and label each state with the most dangerous vehicle.
#Discuss the definition of the most dangerous vehicle, and what you find from the map.
#(Hint: Read the description for the STATE and COUNTY columns in the FARS manual. The state & county codes are Geographic Locator Codes (GLCs) from the General Services Administrationâ€™s (GSA) publication. Use readxl::read_xlsx to read in the GLCs.)
setwd("~/Desktop/DS202/WEEK12/LAB5")
mymap <- readxl::read_xlsx("FRPP_GLC_-_United_StATESaPRIL122021_(2).xlsx")
states <- map_data("state")
View(states)
View(most_dangerous)
View(mymap)
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group)) +
geom_text(aes(label = MAKE), data = textDataYouMade)
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group)) +
geom_text(aes(label = MAKE), data = most_dangerous)
StateLonLat <- most_dangerous %>%
group_by(STATE, MAKE) %>%
right_join(states, by = c('State Name' = 'region')) %>%
summarize(avgLong = mean(long),
avgLat = mean(lat))
StateLonLat <- most_dangerous %>%
group_by(STATE, MAKE) %>%
right_join(states, by = c(STATE = 'region')) %>%
summarize(avgLong = mean(long),
avgLat = mean(lat))
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
per <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv" , stringsAsFactors = FALSE)
#2
fatally_hurt <- per %>% filter(INJ_SEV == 4)
#1
table(acc$DAY_WEEK)
#3
newdata <- na.omit(per)
map(newdata, ~sum(is.na(.)))
most_dangerous <- newdata %>% filter(INJ_SEV == 4) %>% group_by(STATE) %>% count(MAKE)
most_dangerous <- most_dangerous  %>%
group_by(STATE) %>%
slice(which.max(n))
#4 Create a map, and label each state with the most dangerous vehicle.
setwd("~/Desktop/DS202/WEEK12/LAB5")
mymap <- readxl::read_xlsx("FRPP_GLC_-_United_StATESaPRIL122021_(2).xlsx")
states <- map_data("state")
View(states)
View(most_dangerous)
View(mymap)
most_dangerous$STATE <- tolower(most_dangerous$STATE)
View(most_dangerous)
mymap %>% left_join(states, by=c('State Name' = 'region'))
View(mymap)
View(most_dangerous)
stateName <- states %>% group_by(region) %>% summarize(long=mean(long), lat=mean(lat))
states %>% ggplot(aes(x = long, y = lat)) +
geom_polygon(aes(group = group)) +
geom_text(aes(label=region), color='white', data=stateName)
ggplot(states, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) +
geom_point(aes(x=LONGITUD, y=LATITUDE), data=most_dangerous,
color='lightgreen', alpha=0.2, size=0.02) +
xlim(-130, -60) + ylim(20, 50) + coord_map()
ggplot(states, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) +
geom_point(aes(x=LONGITUD, y=LATITUDE), data=acc,
color='lightgreen', alpha=0.2, size=0.02) +
xlim(-130, -60) + ylim(20, 50) + coord_map()
ggplot(states, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) +
geom_point(aes(x=LONGITUD, y=LATITUDE), data=acc,
color='lightgreen', alpha=0.2, size=0.02) +
xlim(-130, -60) + ylim(20, 50) + coord_map()
ggplot(states, aes(x=long, y=lat)) + geom_polygon(aes(group=group)) +
geom_point(aes(x=LONGITUD, y=LATITUDE), data=acc,
color='lightgreen', alpha=0.2, size=0.02) +
xlim(-130, -60) + ylim(20, 50) + coord_map()
StateLonLat <- most_dangerous %>%
group_by('State Name', MAKE) %>%
right_join(states, by = c('State Name' = 'region')) %>%
summarize(avgLong = mean(long),
avgLat = mean(lat))
#5
merged <- merge(acc, per)
View(merged)
str(acc)
str(per)
str(merged)
#6
accidents_no <- merged %>% group_by(DAY_WEEK)
View(accidents_no)
#6
table(merge$DAY_WEEK)
#6
table(merged$DAY_WEEK)
table(merged$HOUR)
table(merged$SEX)
#8
table(merged$MONTH)
hea <- merged %>% group_by(STATE) %>% count(MONTH)
View(hea)
hea <- hea %>%
group_by(STATE) %>%
slice(which.max(n))
View(hea)
str(hea)
head(hea)
summarise(hea)
table(hea)
hea
#6
table(merged$DAY_WEEK)
#6
day <- table(merged$DAY_WEEK)
class(day)
as.data.frame.matrix(day)
#6
day <- as.data.frame.matrix(table(merged$DAY_WEEK))
#6
day <- as_data_frame(table(merged$DAY_WEEK))
#6
day <- as_tibble((table(merged$DAY_WEEK)))
#6
hello = table(merged$DAY_WEEK)
helo
hello
data.frame(rbind(hello))
days <- data.frame(rbind(hello))
class(days)
View(days)
str(days)
View(days)
